VERILOG CODE:
// fir_filter.v
module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,            // 8-bit input sample
    output reg signed [15:0] y_out      // 16-bit output sample
);

    parameter N = 4;
    reg signed [7:0] coeffs [0:N-1] = {8'd2, 8'd3, 8'd3, 8'd2}; // example coefficients
    reg signed [7:0] shift_reg [0:N-1];

    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < N; i = i + 1)
                shift_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift samples
            for (i = N-1; i > 0; i = i - 1)
                shift_reg[i] <= shift_reg[i-1];
            shift_reg[0] <= x_in;

            // Compute output
            y_out <= 0;
            for (i = 0; i < N; i = i + 1)
                y_out <= y_out + shift_reg[i] * coeffs[i];
        end
    end

endmodule

TEST BENCH:
// fir_filter.v
module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,            // 8-bit input sample
    output reg signed [15:0] y_out      // 16-bit output sample
);

    parameter N = 4;
    reg signed [7:0] coeffs [0:N-1] = {8'd2, 8'd3, 8'd3, 8'd2}; // example coefficients
    reg signed [7:0] shift_reg [0:N-1];

    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            for (i = 0; i < N; i = i + 1)
                shift_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift samples
            for (i = N-1; i > 0; i = i - 1)
                shift_reg[i] <= shift_reg[i-1];
            shift_reg[0] <= x_in;

            // Compute output
            y_out <= 0;
            for (i = 0; i < N; i = i + 1)
                y_out <= y_out + shift_reg[i] * coeffs[i];
        end
    end

endmodule

OUTPUT:
Time: 10 | x_in = 1 | y_out = 2
Time: 20 | x_in = 0 | y_out = 3
Time: 30 | x_in = 0 | y_out = 3
Time: 40 | x_in = 0 | y_out = 2
Time: 50 | x_in = 0 | y_out = 0
